#!/bin/sh
### BEGIN INIT INFO
# Short-Description: Hardware temperature monitor.
# Description: Hardware temperature monitor.
# Provides: entry: tempsd
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
### END INIT INFO

# Sysv script with systemd support: run initSystemd.
#
# A temperature monitor with shutdown when configured limits are exceeded.
# Simple configuration / extension for different sensors.
#
# If you have to, use initSystemd to config.

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=tempsd
PIDFILE=/var/run/$NAME.pid
DESC="Hardware temperature monitor."
CONFIG=/usr/local/etc/tempsd.cfg
LOG=/var/log/tempsd.log
CHECKLOOP=120
STARTUP_ERROR=0
ERROR=""
STX="^B"
ETX="^C"
WARNING_COUNT=2;

DEBUG=0;

debug() {
  if [ "$DEBUG" = 1 ]; then
    TSTAMP=`date +%M:%S`
    echo $TSTAMP $1 >>/tmp/tempsd.debug
  fi
}

if [ "$DEBUG" = 1 ]; then
  rm -f /tmp/tempsd.debug
  debug "Debug Enabled"
fi

## Sources of temperature data (Raw output dumped on overheat event) ##########
getNvidiaOp() {
  RET=0
  nvCmd=`which nvidia-settings`
  if [ -n "$nvCmd" -a -e "$nvCmd" ];  then
    nvidia-settings -t -q $1/GPUCoreTemp
  else
    ERROR="Nonexistent nvidia-settings command."
    RET=1
  fi
  return $RET
}


getSensorOp() {
  sensors
}

## Possible check functions (extend here) #####################################
#Calls to these functions are specified in the config file ie
# the name of the func + args delimited by '_' and the max temp
# delimited by ':'. Function calls are delimited by ';' eg:
# temp_1:45;temp_2:45;nvidiaQuadro_0:70'
# Functions must set the TEMP variable.
#nvidiaQuadro_0 -> 0 defines the x11 display number.
#temp_1 -> 1 defines the temperature temp1 from 'sensors' output.

#moboTemp
getMoboTemp() {
  TEMP=`sensors | grep "MB Temperature" |awk '{print $3}'`
  TEMP=`echo $TEMP| cut -d + -f 2`
  TEMP=`echo $TEMP| cut -d . -f 1`
}
#cpuTemp
getCpuTemp() {
  TEMP=`getSensorOp | grep "CPU Temperature" |awk '{print $3}'`
  TEMP=`echo $TEMP| cut -d + -f 2`
  TEMP=`echo $TEMP| cut -d . -f 1`
}
#temp_?
getTemp() {
  #example "temp1:        +44.0Â°C"
  TEMP=`getSensorOp | grep "temp${1}:" | awk '{print $2}'`
  TEMP=`echo $TEMP| cut -d + -f 2`
  TEMP=`echo $TEMP| cut -d . -f 1`
  #TEMP=${TEMP#+}
  #TEMP=${TEMP%.*}
}
getRadeon() {
  TEMP=`sensors | \
  awk -v num="$1" 'BEGIN{found=0}
    { if ($0 ~ /^radeon-pci/) {found=1}
        if ( $0 ~ /^$/) {found=0}
          if (found==1) {
                if ($0 ~ /^temp1/){print $2}
                  }
    }'`
  TEMP=`echo $TEMP| cut -d + -f 2`
  TEMP=`echo $TEMP| cut -d . -f 1`
}

#nvidiaQuadro_?
getNvidiaQuadro() {
  DISPLAY=:$1
  RET=0
  export DISPLAY
  xhost >/dev/null 2>/dev/null
  X_EXISTS=$?
  if [ $X_EXISTS -eq 0 ]; then
    TMP=`getNvidiaOp :$1`
    RET=$?
    debug "getNvidiaQuadro TMP:$TMP RET:$RET"
    if [ $RET -eq 0 ]; then
      TEMP=`echo $TMP |cut -f1 -d' '`
      debug "getNvidiaQuadro TEMP:$TEMP"
    fi
  else
    TEMP="NO_X"
  fi
  return $RET
}

## Main logic #################################################################
checkTemp() {
#Return OVER:t/fMESSAGE[STX]message[ETX] text else an error message.
  cfg_data=$1
  cfg_data_test=$2
  for sensor in `echo $cfg_data | sed s'/;/ /g'`
  do
    msg=""
    OVER="f"
    limit=`echo $sensor | cut -s -d : -f 2`
    cmd=`echo $sensor | cut -s -d : -f 1`
    if [ -z "$cmd" -o -z "$limit" ]; then
      echo Error in tempsd: Not of form 'sensorNameA_arg1_arg2:temperatureLimit;sensorNameB_arg1:tempLimit'
      RET=1;
    else
      firstLetter=`echo ${cmd} | cut -c 1 | tr [:lower:] [:upper:]`
      endCmd=`echo ${cmd} | cut -c 2- | sed s'/_/ /g' `
      cmd=get$firstLetter$endCmd
      TEMP=""
      $cmd
      RET=$?
      temp=$TEMP
      debug "sensor:$sensor cmd:$cmd RET:$RET temp:$temp"
      if [ $RET != 0 ]; then
        debug "RET:$RET"
        msg="Failure in tempsd testing for SENSOR:$sensor"
      elif [ "$temp" = "NO_X" ]; then
        #if NO_X then X is not running and we can not get the nv card temp.
        #Without X nv card should not be hot so ignore nv card and continue.
        nop
      else
        if [ -z "$temp" ]; then
          msg="ERROR tempsd : No temperature returned from SENSOR:$sensor"
          if [ -n "$cfg_data_test" ]; then
            #On cfg_data_test ie startup. Allow print of config location.
            RET=1;
          else
            OVER=t;
          fi
        elif [ -z "$cfg_data_test" -a "$temp" -gt "$limit" ]; then
          msg="WARNING tempsd: Running hot! LIMIT:$temp SENSOR:$sensor"
          OVER=t;
        fi
      fi
    fi
    if [ $RET -ne 0 ]; then
      echo OVER${OVER}MESSAGE${STX}${msg}${ETX}
      return $RET
    elif [ "$OVER" =  t ]; then
      echo OVER${OVER}MESSAGE${STX}${msg}${ETX}
      return $RET
    fi
  done;
  echo OVER${OVER}MESSAGE${STX}${ETX}
}

doShutdown() {
  shutdown -h 0
}

shutdownWarning() {
  causeMsg=$1
  {
    echo Shutdown imminent!
    echo $causeMsg
  } | wall
  DISPLAY=$TEMPSD_DISPLAY
  debug DISPLAY:$DISPLAY
  export DISPLAY
  xhost >/dev/null 2>/dev/null
  X_EXISTS=$?
  if [ $X_EXISTS -eq 0 ]; then
    xterm -fa *courier* -fs 20  -bg red -fg black -maximized -T "Computer Temperature Monitor" -hold \
      -e echo "$causeMsg" & 2>>$LOG >>$LOG
  else
    echo No X11! Is /etc/X11/xinit/xinitrc or $HOME/.xinitrc configured? ie: xhost +si:localuser:root >>$LOG
  fi
  WARNING_COUNT=$((WARNING_COUNT-1));
  debug WARNING_COUNT=$WARNING_COUNT
}

start() {
  debug start
  RET=0;
  if [ -e "${PIDFILE}" ]; then
    echo $NAME already running: $PIDFILE exists.
    RET=1;
  else
    TEMPSD_DISPLAY=`head -1 $CONFIG`
    CFG_DATA=`tail -1 $CONFIG`
    debug ConfigLocation:$CONFIG
    debug ConfigData:$CFG_DATA
    if [ -z "$CFG_DATA" ]; then
      echo
      echo Error no config data in $CONFIG.
      echo For example set $CONFIG containing:
      echo ":0"
      echo "temp_1:49;temp_2:50;temp_3:30;nvidiaQuadro_0:70"
      STARTUP_ERROR=1
    else
      OP=$(checkTemp $CFG_DATA test 2>&1)
      RET=$?
      if [ $RET -ne 0 ]; then
        echo Error in tempsd config data in $CONFIG.
        echo $OP
        echo THE TEMPERATURE MONITOR FAILED TO START.
        echo OPEATION OF YOUR COMPUTER WITHOUT A TEMPERATURE MONITOR MAY RESULT IN A FIRE!
        STARTUP_ERROR=1
        RET=0
      fi
    fi
    if [ $STARTUP_ERROR -eq 1 ]; then
      WARNING_COUNT=20
    fi
    (
      while [ 1 -eq 1 ]; do
        if [ $STARTUP_ERROR -eq 1 ]; then
            shutdownWarning "Error on start of tempsd service. Computer may cause a fire."
        else
          #Capture all stdout and stderr and fail on random output.
          OP=$(checkTemp $CFG_DATA 2>&1)
          RET=$?
          if [ "$RET" -ne 0 ]; then
            shutdownWarning $OP
          else
            MATCH=`expr match "$OP" '\(^OVER[tf]MESSAGE'$STX'.*'$ETX'\)'`
            OVER=`expr substr  "$OP" 5 1`
            MSG=`expr substr "$OP" 14 1000`
            debug "match:$MATCH"
            debug "over:$OVER"
            debug "msg:$MSG"
            if [ -z "$MATCH" ]; then
              shutdownWarning "Error tempsd data collection. Data: $OP"
            elif [ "$OVER" != "f" ]; then
              shutdownWarning "Computer Overheating. Check the operation of fans, water pump etc. $MSG"
              {
              date >> $LOG
              getSensorOp >> $LOG
              getNvidiaOp $TPSD_DISPLAY >> $LOG
              } | tee -a $LOG | wall
            fi
          fi
        fi
        if [ $WARNING_COUNT -lt 0 ]; then
          doShutdown
        fi
        sleep $CHECKLOOP;
      done;
    )&
    echo $! > $PIDFILE
    echo Started $NAME ok.
  fi
  return $RET;
}

stop() {
  RET=0
  if [ -e "${PIDFILE}" ]; then
    if [ -r "${PIDFILE}" ]; then
      PID=`cat ${PIDFILE}`
      MSG=`kill -0 $PID`
      RET=$?
      if [ $RET -ne 0 ]; then
        echo $MSG
      else
        MSG=`kill -15 $PID`
        RET=$?
        if [ $RET -ne 0 ]; then
          echo $MSG
          echo Could not stop process $NAME pid: $PID.
        else
          rm ${PIDFILE}
          echo Stopped $NAME ok.
        fi
      fi
    else
      echo "No permission to read file ${PIDFILE}."
      RET=1;
    fi
  fi
  return $RET
}

SYSTEMD_SERVICE=/etc/systemd/system/tempsd.service
#SYSTEMD_SERVICE=~/tempsd.service
initSystemd() {
  if [ -e $SYSTEMD_SERVICE ]; then
    echo $SYSTEMD_SERVICE already installed.
  else
    touch $SYSTEMD_SERVICE
    chmod 700 $SYSTEMD_SERVICE
    SCRIPT_LOC=`readlink -f "$0"`
    (
      cat <<EOF
[Unit]
Description=Local Host temperature shutdown monitor.

[Service]
Type=forking
ExecStart=$SCRIPT_LOC start
ExecStop=$SCRIPT_LOC stop
SuccessExitStatus=0
RestartPreventExitStatus=1 2
PIDFile=$PIDFILE

[Install]
WantedBy=multi-user.target
EOF
    ) > $SYSTEMD_SERVICE
    systemctl enable tempsd.service
    systemctl start tempsd.service
  fi
}

case "$1" in
start)
  echo Starting $NAME...
  start
  ;;
stop)
  echo Stopping $NAME...
  stop
  ;;
restart)
  echo Restarting $NAME...
  stop
  start
  ;;
initSystemd)
  echo Installing $SYSTEMD_SERVICE
  initSystemd
  ;;
*)
  echo "Usage /etc/init.d/$NAME {start|stop|initSystemd}"
  exit 2;
  ;;
esac

# vim: tabstop=2 shiftwidth=2 expandtab:
